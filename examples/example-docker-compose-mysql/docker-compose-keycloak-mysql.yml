version: "3.7"

x-logging:
  &default-logging
  driver: "json-file"
  options:
    max-size: "2m"
    max-file: "2"

services:
  mysql:
    image: mysql:8.0.23
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: ChangeMe
      # MYSQL_ROOT_HOST: "%"
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
      MYSQL_DATABASE: keycloak
    healthcheck:
      test: "mysqladmin ping -u root -p$${MYSQL_ROOT_PASSWORD}"
      start_period: 10s
      timeout: 20s
      retries: 10
    volumes:
      # On Windows if your Keycloak times out setting up the DB then try to put the volume on a faster drive (C: is an SSD!!!)
      - ./DockerVolumes/mysql-keycloak-testing:/var/lib/mysql
    ports:
      - 3306:3306
    cap_add:
      - SYS_NICE  # CAP_SYS_NICE
    networks:
      - keycloak-nodejs-connect-testing
    logging: *default-logging      
    
  adminer:
    image: adminer
    hostname: adminer
    container_name: adminer
    restart: unless-stopped
    depends_on:
      - mysql
    ports:
      - 8081:8080    
    networks:
      - keycloak-nodejs-connect-testing
    logging: *default-logging      
    
  portainer:
    image: portainer/portainer-ce:2.1.1-alpine
    hostname: portainer
    container_name: portainer
    restart: unless-stopped
    # Admin User password: Password01
    volumes:
      - ./DockerVolumes/portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8000:8000
      - 9000:9000
    networks:
      - keycloak-nodejs-connect-testing
    logging: *default-logging      

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    hostname: keycloak
    container_name: keycloak
    restart: unless-stopped
    depends_on:
      mysql:
      #mariadb: mariadb fails!!!!
        condition: service_healthy
    environment:
      DB_VENDOR: mysql
      DB_ADDR: mysql
      DB_PORT: 3306
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_HTTPS_PORT: 8443
      # The line below is to specify JDBC parameters, which shouldn't be used in production without knowledge. 
      #  It is highly recommended that you read the MySQL JDBC driver documentation in order to use it in production!!!!
      JDBC_PARAMS: "useSSL=FALSE&allowPublicKeyRetrieval=TRUE&connectTimeout=60000"
      JAVA_OPTS: "-Djboss.as.management.blocking.timeout=3600"
      #------------------------------------------------------------------------------------------------------------
      # Export Realm, see https://hub.docker.com/r/jboss/keycloak/
      #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
      # Import Realm, see https://hub.docker.com/r/jboss/keycloak/
      # KEYCLOAK_IMPORT: /config/nodejs-test-realm.json 
      #------------------------------------------------------------------------------------------------------------
    command:
      # see https://stackoverflow.com/questions/61184888/how-to-import-multiple-realm-in-keycloak
      - "-b 0.0.0.0"
      - "-Dkeycloak.migration.action=import"
      - "-Dkeycloak.migration.provider=singleFile"
      - "-Dkeycloak.migration.file=/config/nodejs-test-realm.json"
      - "-Dkeycloak.migration.strategy=IGNORE_EXISTING"
    volumes:
      - ./nodejs-test-realm.json:/config/nodejs-test-realm.json 
    ports:
      - 8080:8080
      - 8443:8443
      - 9990:9990
    healthcheck:
      test: "curl -f http://localhost:8080/auth || exit 1"
      start_period: 10s
    networks:
      - keycloak-nodejs-connect-testing
    logging: *default-logging      

  keycloak_SA:
    image: quay.io/keycloak/keycloak:12.0.4
    hostname: keycloak_SA
    container_name: keycloak_SA
    restart: unless-stopped
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_HTTPS_PORT: 8443
      JAVA_OPTS: "-Djboss.as.management.blocking.timeout=3600"
      #------------------------------------------------------------------------------------------------------------
      # Export Realm, see https://hub.docker.com/r/jboss/keycloak/
      #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
      # Import Realm, see https://hub.docker.com/r/jboss/keycloak/
      # KEYCLOAK_IMPORT: /config/nodejs-test-realm.json 
      #------------------------------------------------------------------------------------------------------------
    command:
      # see https://stackoverflow.com/questions/61184888/how-to-import-multiple-realm-in-keycloak
      - "-b 0.0.0.0"
      - "-Dkeycloak.migration.action=import"
      - "-Dkeycloak.migration.provider=singleFile"
      - "-Dkeycloak.migration.file=/config/nodejs-test-realm.json"
      - "-Dkeycloak.migration.strategy=IGNORE_EXISTING"
    volumes:
      - ./nodejs-test-realm.json:/config/nodejs-test-realm.json 
    ports:
      - 8080:8080
      - 8443:8443
      - 9990:9990
    healthcheck:
      test: "curl -f http://localhost:8080/auth || exit 1"
      start_period: 10s
    networks:
      - keycloak-nodejs-connect-testing
    logging: *default-logging      

networks:
  keycloak-nodejs-connect-testing:
   name: keycloak-nodejs-connect-testing

# ------------------------------------------------------------------------------------------------------------------------------------
# http://localhost:8080/auth/admin/master/console
# ------------------------------------------------------------------------------------------------------------------------------------
# DOCKER WINDOWS PORT BINDING ERROR
# =====================================
# ERROR: 
# ------  
#     Ports are not available: listen tcp 0.0.0.0:8022: 
#     bind: An attempt was made to access a socket in a way forbidden by its access permissions
#
# SOLUTION:
# ---------
# from admin command prompt run the following two commands:
# sc stop winnat
#
# Notes:
# sc qc winnat
# sc query winnat
# "C:\Program Files\Docker\Docker\Docker Desktop.exe"
# DO NOT "sc config WinNat start=demand" as docker will crash on startup!!!
# ------------------------------------------------------------------------------------------------------------------------------------
# ------------------------------------------------------------------------------------------------------------------------------------
